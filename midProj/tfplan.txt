module.ansible_sg.tls_private_key.ansible_key: Refreshing state... [id=fa5481f59508656dc3e916ef9e8f93acc89ea9b4]
module.ansible_sg.local_file.ansible_key: Refreshing state... [id=565f63d6277a78cf71405b542f9f2190d5db74ed]
module.ansible_sg.aws_key_pair.ansible_key: Refreshing state... [id=ansible_key]
module.S3-put-access.aws_iam_policy.iam_policy: Refreshing state... [id=arn:aws:iam::727940474452:policy/s3-policy]
module.main_vpc.aws_vpc.main: Refreshing state... [id=vpc-02557953402491cda]
module.eip.aws_eip.eip: Refreshing state... [id=eipalloc-02a8812ef4a9b5db1]
module.nginx_role.aws_iam_role.iam_role: Refreshing state... [id=nginx-role-s3]
module.nginx_instance_profile.aws_iam_instance_profile.instance_profile: Refreshing state... [id=nginx-profile]
module.igw.aws_internet_gateway.igw: Refreshing state... [id=igw-0319eb10a6746fa68]
module.public_subnet_1.aws_subnet.subnet: Refreshing state... [id=subnet-0e39b5f57ca61e375]
module.ansible_sg.aws_security_group.ansible-sg: Refreshing state... [id=sg-05f63ec4c9824335b]
module.public_subnet_2.aws_subnet.subnet: Refreshing state... [id=subnet-04857ae201222c1a2]
module.private_subnet_1.aws_subnet.subnet: Refreshing state... [id=subnet-0856af103b3019e3a]
module.private_subnet_2.aws_subnet.subnet: Refreshing state... [id=subnet-09912a8ca3256c3e7]
module.nginx-tg.aws_lb_target_group.tg: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:727940474452:targetgroup/nginx-tg/f234cf44f7a6884f]
module.jenkins.aws_security_group.jenkins: Refreshing state... [id=sg-0c6f10cdba5de2649]
module.nginx-sg.aws_security_group.security_group: Refreshing state... [id=sg-06a16aefb6e4b4aed]
module.igw-route-table.aws_route_table.route_table: Refreshing state... [id=rtb-0c2918ac4613df300]
module.nat_gateway.aws_nat_gateway.ngw: Refreshing state... [id=nat-087a28b607468d8c2]
module.ansible_sg.aws_instance.nodes[1]: Refreshing state... [id=i-07ffa4706574caaf8]
module.ansible_sg.aws_instance.nodes[0]: Refreshing state... [id=i-09874b5e64e36960c]
module.ansible_sg.aws_instance.server[0]: Refreshing state... [id=i-0488063cb35516496]
module.sg-rule-in-2.aws_security_group_rule.sg-rule: Refreshing state... [id=sgrule-4181763959]
module.ansible_sg.aws_instance.nodes-redhat[0]: Refreshing state... [id=i-065822a548d9e216e]
module.db-server-2[0].aws_instance.ec2_instance[0]: Refreshing state... [id=i-0412120f460fa0252]
module.sg-rule-in-1.aws_security_group_rule.sg-rule: Refreshing state... [id=sgrule-1338702530]
module.sg-rule-out.aws_security_group_rule.sg-rule: Refreshing state... [id=sgrule-4084297680]
module.lb.aws_lb.lb: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:727940474452:loadbalancer/app/web-lb/cc4c97721c60ebc5]
module.nginx-instance-1[0].aws_instance.ec2_instance[0]: Refreshing state... [id=i-0585196f1114706ed]
module.nginx-instance-2[0].aws_instance.ec2_instance[0]: Refreshing state... [id=i-003fe29314d7d7607]
module.jenkins.aws_instance.jenkins_server: Refreshing state... [id=i-021d051301be4ab4a]
module.jenkins.aws_instance.jenkins_agent: Refreshing state... [id=i-032e29f664e86242f]
module.db-server-1[0].aws_instance.ec2_instance[0]: Refreshing state... [id=i-01366ab13bb9b9a4b]
module.rt-assoc-pub-1.aws_route_table_association.rt_association: Refreshing state... [id=rtbassoc-010307075c47810a8]
module.rt-assoc-pub-2.aws_route_table_association.rt_association: Refreshing state... [id=rtbassoc-01678f0b6a2ee131c]
module.nat-route-table.aws_route_table.route_table: Refreshing state... [id=rtb-02eb3a5454d7aac6f]
module.listener-lb.aws_lb_listener.front_end: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:727940474452:listener/app/web-lb/cc4c97721c60ebc5/c35632fdfec5de5d]
module.rt-assoc-prv-1.aws_route_table_association.rt_association: Refreshing state... [id=rtbassoc-03e43a0af096b9b05]
module.rt-assoc-prv-2.aws_route_table_association.rt_association: Refreshing state... [id=rtbassoc-0c6b61c5a56f56b43]
module.lb-tg-attachment-nginx-1.aws_lb_target_group_attachment.lb-tg-attachment: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:727940474452:targetgroup/nginx-tg/f234cf44f7a6884f-20211225130458835900000002]
module.lb-tg-attachment-nginx-2.aws_lb_target_group_attachment.lb-tg-attachment: Refreshing state... [id=arn:aws:elasticloadbalancing:us-east-1:727940474452:targetgroup/nginx-tg/f234cf44f7a6884f-20211225130447864000000001]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the
last "terraform apply":

  # module.nat-route-table.aws_route_table.route_table has been changed
  ~ resource "aws_route_table" "route_table" {
        id               = "rtb-02eb3a5454d7aac6f"
      ~ route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = ""
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = "nat-087a28b607468d8c2"
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = "nat-087a28b607468d8c2"
              - instance_id                = ""
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = ""
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ]
        tags             = {}
        # (5 unchanged attributes hidden)
    }

Unless you have made equivalent changes to your configuration, or ignored the
relevant attributes using ignore_changes, the following plan may include
actions to undo or respond to these changes.

─────────────────────────────────────────────────────────────────────────────

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place
-/+ destroy and then create replacement
 <= read (data resources)

Terraform will perform the following actions:

  # module.eks.data.aws_eks_cluster.eks will be read during apply
  # (config refers to values not yet known)
 <= data "aws_eks_cluster" "eks"  {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = (known after apply)
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + kubernetes_network_config = (known after apply)
      + name                      = (known after apply)
      + platform_version          = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + tags                      = (known after apply)
      + version                   = (known after apply)
      + vpc_config                = (known after apply)
    }

  # module.eks.data.aws_eks_cluster_auth.eks will be read during apply
  # (config refers to values not yet known)
 <= data "aws_eks_cluster_auth" "eks"  {
      + id    = (known after apply)
      + name  = (known after apply)
      + token = (sensitive value)
    }

  # module.eks.aws_security_group.all_worker_mgmt will be created
  + resource "aws_security_group" "all_worker_mgmt" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.0.0.0/8",
                  + "172.16.0.0/12",
                  + "192.168.0.0/16",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = "all_worker_management"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-02557953402491cda"
    }

  # module.eks.kubernetes_service_account.opsschool_sa will be created
  + resource "kubernetes_service_account" "opsschool_sa" {
      + automount_service_account_token = true
      + default_secret_name             = (known after apply)
      + id                              = (known after apply)

      + metadata {
          + annotations      = (known after apply)
          + generation       = (known after apply)
          + name             = "opsschool-sa"
          + namespace        = "default"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.eks.random_string.suffix will be created
  + resource "random_string" "suffix" {
      + id          = (known after apply)
      + length      = 8
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + result      = (known after apply)
      + special     = false
      + upper       = true
    }

  # module.jenkins.aws_instance.jenkins_agent must be replaced
-/+ resource "aws_instance" "jenkins_agent" {
      ~ arn                                  = "arn:aws:ec2:us-east-1:727940474452:instance/i-032e29f664e86242f" -> (known after apply)
      ~ associate_public_ip_address          = false -> (known after apply)
      ~ availability_zone                    = "us-east-1a" -> (known after apply)
      ~ cpu_core_count                       = 1 -> (known after apply)
      ~ cpu_threads_per_core                 = 2 -> (known after apply)
      ~ disable_api_termination              = false -> (known after apply)
      ~ ebs_optimized                        = false -> (known after apply)
      - hibernation                          = false -> null
      + host_id                              = (known after apply)
      ~ id                                   = "i-032e29f664e86242f" -> (known after apply)
      ~ instance_initiated_shutdown_behavior = "stop" -> (known after apply)
      ~ instance_state                       = "running" -> (known after apply)
      ~ ipv6_address_count                   = 0 -> (known after apply)
      ~ ipv6_addresses                       = [] -> (known after apply)
      ~ monitoring                           = false -> (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      ~ primary_network_interface_id         = "eni-01fa9de7d6c510dd1" -> (known after apply)
      ~ private_dns                          = "ip-10-0-10-40.ec2.internal" -> (known after apply)
      ~ private_ip                           = "10.0.10.40" -> (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      ~ secondary_private_ips                = [] -> (known after apply)
      ~ security_groups                      = [] -> (known after apply)
        tags                                 = {
            "Name" = "Jenkins Agent"
        }
      ~ tenancy                              = "default" -> (known after apply)
      ~ user_data                            = "409cae20c2e06cecb1e42f219bffa936baba4a93" -> "f7d3f980f8422233cea08033a15c492d04befcaa" # forces replacement
      + user_data_base64                     = (known after apply)
        # (8 unchanged attributes hidden)

      ~ capacity_reservation_specification {
          ~ capacity_reservation_preference = "open" -> (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      - credit_specification {
          - cpu_credits = "unlimited" -> null
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      ~ enclave_options {
          ~ enabled = false -> (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      ~ metadata_options {
          ~ http_endpoint               = "enabled" -> (known after apply)
          ~ http_put_response_hop_limit = 1 -> (known after apply)
          ~ http_tokens                 = "optional" -> (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      ~ root_block_device {
          ~ delete_on_termination = true -> (known after apply)
          ~ device_name           = "/dev/xvda" -> (known after apply)
          ~ encrypted             = false -> (known after apply)
          ~ iops                  = 100 -> (known after apply)
          + kms_key_id            = (known after apply)
          ~ tags                  = {} -> (known after apply)
          ~ throughput            = 0 -> (known after apply)
          ~ volume_id             = "vol-09b10d2b7cb621ae7" -> (known after apply)
          ~ volume_size           = 8 -> (known after apply)
          ~ volume_type           = "gp2" -> (known after apply)
        }
    }

  # module.nat-route-table.aws_route_table.route_table will be updated in-place
  ~ resource "aws_route_table" "route_table" {
        id               = "rtb-02eb3a5454d7aac6f"
      ~ route            = [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = ""
              - instance_id                = ""
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = "nat-087a28b607468d8c2"
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = "nat-087a28b607468d8c2"
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
        tags             = {}
        # (5 unchanged attributes hidden)
    }

  # module.eks.module.eks.data.http.wait_for_cluster[0] will be read during apply
  # (config refers to values not yet known)
 <= data "http" "wait_for_cluster"  {
      + body             = (known after apply)
      + ca_certificate   = (known after apply)
      + id               = (known after apply)
      + response_headers = (known after apply)
      + timeout          = 300
      + url              = (known after apply)
    }

  # module.eks.module.eks.aws_autoscaling_group.workers[0] will be created
  + resource "aws_autoscaling_group" "workers" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + capacity_rebalance        = false
      + default_cooldown          = (known after apply)
      + desired_capacity          = 2
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + launch_configuration      = (known after apply)
      + max_instance_lifetime     = 0
      + max_size                  = 3
      + metrics_granularity       = "1Minute"
      + min_size                  = 1
      + name                      = (known after apply)
      + name_prefix               = (known after apply)
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + suspended_processes       = [
          + "AZRebalance",
        ]
      + termination_policies      = []
      + vpc_zone_identifier       = [
          + "10.0.10.0/24",
          + "10.0.11.0/24",
        ]
      + wait_for_capacity_timeout = "10m"

      + tag {
          + key                 = "Environment"
          + propagate_at_launch = true
          + value               = "training"
        }
      + tag {
          + key                 = "GithubOrg"
          + propagate_at_launch = true
          + value               = "terraform-aws-modules"
        }
      + tag {
          + key                 = "GithubRepo"
          + propagate_at_launch = true
          + value               = "terraform-aws-eks"
        }
      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = (known after apply)
        }
      + tag {
          + key                 = (known after apply)
          + propagate_at_launch = true
          + value               = "owned"
        }
      + tag {
          + key                 = (known after apply)
          + propagate_at_launch = true
          + value               = "owned"
        }
    }

  # module.eks.module.eks.aws_autoscaling_group.workers[1] will be created
  + resource "aws_autoscaling_group" "workers" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + capacity_rebalance        = false
      + default_cooldown          = (known after apply)
      + desired_capacity          = 2
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + launch_configuration      = (known after apply)
      + max_instance_lifetime     = 0
      + max_size                  = 3
      + metrics_granularity       = "1Minute"
      + min_size                  = 1
      + name                      = (known after apply)
      + name_prefix               = (known after apply)
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + suspended_processes       = [
          + "AZRebalance",
        ]
      + termination_policies      = []
      + vpc_zone_identifier       = [
          + "10.0.10.0/24",
          + "10.0.11.0/24",
        ]
      + wait_for_capacity_timeout = "10m"

      + tag {
          + key                 = "Environment"
          + propagate_at_launch = true
          + value               = "training"
        }
      + tag {
          + key                 = "GithubOrg"
          + propagate_at_launch = true
          + value               = "terraform-aws-modules"
        }
      + tag {
          + key                 = "GithubRepo"
          + propagate_at_launch = true
          + value               = "terraform-aws-eks"
        }
      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = (known after apply)
        }
      + tag {
          + key                 = (known after apply)
          + propagate_at_launch = true
          + value               = "owned"
        }
      + tag {
          + key                 = (known after apply)
          + propagate_at_launch = true
          + value               = "owned"
        }
    }

  # module.eks.module.eks.aws_eks_cluster.this[0] will be created
  + resource "aws_eks_cluster" "this" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = (known after apply)
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + tags                  = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + tags_all              = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + version               = "1.21"

      + kubernetes_network_config {
          + service_ipv4_cidr = (known after apply)
        }

      + timeouts {
          + create = "30m"
          + delete = "15m"
          + update = "60m"
        }

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = [
              + "0.0.0.0/0",
            ]
          + security_group_ids        = (known after apply)
          + subnet_ids                = [
              + "10.0.10.0/24",
              + "10.0.11.0/24",
            ]
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.module.eks.aws_iam_instance_profile.workers[0] will be created
  + resource "aws_iam_instance_profile" "workers" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = (known after apply)
      + path        = "/"
      + role        = (known after apply)
      + tags        = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + tags_all    = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + unique_id   = (known after apply)
    }

  # module.eks.module.eks.aws_iam_instance_profile.workers[1] will be created
  + resource "aws_iam_instance_profile" "workers" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = (known after apply)
      + path        = "/"
      + role        = (known after apply)
      + tags        = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + tags_all    = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + unique_id   = (known after apply)
    }

  # module.eks.module.eks.aws_iam_openid_connect_provider.oidc_provider[0] will be created
  + resource "aws_iam_openid_connect_provider" "oidc_provider" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags            = (known after apply)
      + tags_all        = (known after apply)
      + thumbprint_list = [
          + "9e99a48a9960b14926bb7f3b02e22da2b0ab7280",
        ]
      + url             = (known after apply)
    }

  # module.eks.module.eks.aws_iam_policy.cluster_deny_log_group[0] will be created
  + resource "aws_iam_policy" "cluster_deny_log_group" {
      + arn         = (known after apply)
      + description = "Deny CreateLogGroup"
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "logs:CreateLogGroup"
                      + Effect   = "Deny"
                      + Resource = "*"
                      + Sid      = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id   = (known after apply)
      + tags        = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + tags_all    = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
    }

  # module.eks.module.eks.aws_iam_policy.cluster_elb_sl_role_creation[0] will be created
  + resource "aws_iam_policy" "cluster_elb_sl_role_creation" {
      + arn         = (known after apply)
      + description = "Permissions for EKS to create AWSServiceRoleForElasticLoadBalancing service-linked role"
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ec2:DescribeInternetGateways",
                          + "ec2:DescribeAddresses",
                          + "ec2:DescribeAccountAttributes",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id   = (known after apply)
      + tags        = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + tags_all    = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
    }

  # module.eks.module.eks.aws_iam_role.cluster[0] will be created
  + resource "aws_iam_role" "cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                      + Sid       = "EKSClusterAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + tags_all              = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.eks.module.eks.aws_iam_role.workers[0] will be created
  + resource "aws_iam_role" "workers" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = "EKSWorkerAssumeRole"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + tags_all              = {
          + "Environment" = "training"
          + "GithubOrg"   = "terraform-aws-modules"
          + "GithubRepo"  = "terraform-aws-eks"
        }
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy[0] will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = (known after apply)
    }

  # module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy[0] will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSServicePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      + role       = (known after apply)
    }

  # module.eks.module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy[0] will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSVPCResourceControllerPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = (known after apply)
    }

  # module.eks.module.eks.aws_iam_role_policy_attachment.cluster_deny_log_group[0] will be created
  + resource "aws_iam_role_policy_attachment" "cluster_deny_log_group" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = (known after apply)
    }

  # module.eks.module.eks.aws_iam_role_policy_attachment.cluster_elb_sl_role_creation[0] will be created
  + resource "aws_iam_role_policy_attachment" "cluster_elb_sl_role_creation" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = (known after apply)
    }

  # module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEC2ContainerRegistryReadOnly[0] will be created
  + resource "aws_iam_role_policy_attachment" "workers_AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = (known after apply)
    }

  # module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEKSWorkerNodePolicy[0] will be created
  + resource "aws_iam_role_policy_attachment" "workers_AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = (known after apply)
    }

  # module.eks.module.eks.aws_iam_role_policy_attachment.workers_AmazonEKS_CNI_Policy[0] will be created
  + resource "aws_iam_role_policy_attachment" "workers_AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = (known after apply)
    }

  # module.eks.module.eks.aws_launch_configuration.workers[0] will be created
  + resource "aws_launch_configuration" "workers" {
      + arn                         = (known after apply)
      + associate_public_ip_address = false
      + ebs_optimized               = true
      + enable_monitoring           = true
      + iam_instance_profile        = (known after apply)
      + id                          = (known after apply)
      + image_id                    = "ami-019904275ee6b71a3"
      + instance_type               = "t3.medium"
      + key_name                    = (known after apply)
      + name                        = (known after apply)
      + name_prefix                 = (known after apply)
      + security_groups             = (known after apply)
      + user_data_base64            = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + no_device             = (known after apply)
          + snapshot_id           = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = "optional"
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = false
          + iops                  = 0
          + throughput            = (known after apply)
          + volume_size           = 100
          + volume_type           = "gp2"
        }
    }

  # module.eks.module.eks.aws_launch_configuration.workers[1] will be created
  + resource "aws_launch_configuration" "workers" {
      + arn                         = (known after apply)
      + associate_public_ip_address = false
      + ebs_optimized               = true
      + enable_monitoring           = true
      + iam_instance_profile        = (known after apply)
      + id                          = (known after apply)
      + image_id                    = "ami-019904275ee6b71a3"
      + instance_type               = "t3.large"
      + key_name                    = (known after apply)
      + name                        = (known after apply)
      + name_prefix                 = (known after apply)
      + security_groups             = (known after apply)
      + user_data_base64            = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + no_device             = (known after apply)
          + snapshot_id           = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = "optional"
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = false
          + iops                  = 0
          + throughput            = (known after apply)
          + volume_size           = 100
          + volume_type           = "gp2"
        }
    }

  # module.eks.module.eks.aws_security_group.cluster[0] will be created
  + resource "aws_security_group" "cluster" {
      + arn                    = (known after apply)
      + description            = "EKS cluster security group."
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = (known after apply)
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-02557953402491cda"
    }

  # module.eks.module.eks.aws_security_group.workers[0] will be created
  + resource "aws_security_group" "workers" {
      + arn                    = (known after apply)
      + description            = "Security group for all nodes in the cluster."
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = (known after apply)
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-02557953402491cda"
    }

  # module.eks.module.eks.aws_security_group_rule.cluster_egress_internet[0] will be created
  + resource "aws_security_group_rule" "cluster_egress_internet" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allow cluster egress access to the Internet."
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.eks.module.eks.aws_security_group_rule.cluster_https_worker_ingress[0] will be created
  + resource "aws_security_group_rule" "cluster_https_worker_ingress" {
      + description              = "Allow pods to communicate with the EKS cluster API."
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.eks.module.eks.aws_security_group_rule.workers_egress_internet[0] will be created
  + resource "aws_security_group_rule" "workers_egress_internet" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Allow nodes all egress to the Internet."
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster[0] will be created
  + resource "aws_security_group_rule" "workers_ingress_cluster" {
      + description              = "Allow workers pods to receive communication from the cluster control plane."
      + from_port                = 1025
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "ingress"
    }

  # module.eks.module.eks.aws_security_group_rule.workers_ingress_cluster_https[0] will be created
  + resource "aws_security_group_rule" "workers_ingress_cluster_https" {
      + description              = "Allow pods running extension API servers on port 443 to receive communication from cluster control plane."
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.eks.module.eks.aws_security_group_rule.workers_ingress_self[0] will be created
  + resource "aws_security_group_rule" "workers_ingress_self" {
      + description              = "Allow node to communicate with each other."
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "ingress"
    }

  # module.eks.module.eks.kubernetes_config_map.aws_auth[0] will be created
  + resource "kubernetes_config_map" "aws_auth" {
      + data = (known after apply)
      + id   = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + labels           = {
              + "app.kubernetes.io/managed-by" = "Terraform"
              + "terraform.io/module"          = "terraform-aws-modules.eks.aws"
            }
          + name             = "aws-auth"
          + namespace        = "kube-system"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.eks.module.eks.local_file.kubeconfig[0] will be created
  + resource "local_file" "kubeconfig" {
      + content              = (known after apply)
      + directory_permission = "0755"
      + file_permission      = "0600"
      + filename             = (known after apply)
      + id                   = (known after apply)
    }

  # module.eks.module.iam_assumable_role_admin.data.aws_iam_policy_document.assume_role_with_oidc[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "assume_role_with_oidc"  {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions       = (known after apply)
          + effect        = (known after apply)
          + not_actions   = (known after apply)
          + not_resources = (known after apply)
          + resources     = (known after apply)
          + sid           = (known after apply)

          + condition {
              + test     = (known after apply)
              + values   = (known after apply)
              + variable = (known after apply)
            }

          + not_principals {
              + identifiers = (known after apply)
              + type        = (known after apply)
            }

          + principals {
              + identifiers = (known after apply)
              + type        = (known after apply)
            }
        }
    }

  # module.eks.module.iam_assumable_role_admin.aws_iam_role.this[0] will be created
  + resource "aws_iam_role" "this" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "opsschool-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.eks.module.iam_assumable_role_admin.aws_iam_role_policy_attachment.custom[0] will be created
  + resource "aws_iam_role_policy_attachment" "custom" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
      + role       = "opsschool-role"
    }

Plan: 36 to add, 1 to change, 1 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
